package _01基本数据类型及运算符;

public class _18位运算原码反码补码的关系 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*原码、反码、补码
		 * 1.二进制的最高位（最左边）是符号位：0表示正数，1表示负数
		 * 2.正数的原码、反码、补码都一样（三码合一）
		 * 3.负数的反码 = 它的原码符号位不变，其他位取反(0->1)(1->0)
		 * 4.负数的补码 = 它的反码+1 ，负数的反码 = 负数的补码-1
		 * 5.0的反码、补码都是0
		 * 6.java没有无符号数，换言之，Java中的数都是有符号的
		 * 7.在计算机运算的时候，都是以补码的方式来运算的
		 * 8.当我们看运算结果的时候，要看他的原码
		 */
		int n1 = (3&3);
		/*因为是int类型 占四个比特位 一个比特位 = 八个字节
		 * 3的原码是 00000000 00000000 00000000 000000011
		 * 计算要换成补码来计算 因为是正数 所以3的原码 = 补码
		 * 00000000 00000000 00000000 000000011
		 * 00000000 00000000 00000000 000000011俩个进行按位与操作
		 * 得到00000000 00000000 00000000 000000011
		 * 因为看结果是为原码 所以再转换成原码00000000 00000000 00000000 000000011
		 * 所以结果为3
		 */
		System.out.println(n1);
		int n2 = (~-2);
		/*-2的原码为 10000000 00000000 00000000 00000010
		 * -2的补码为其反码+1 
		 * -2的反码为 11111111 11111111 11111111 11111101
		 * 所以-2的补码 11111111 11111111 11111111 11111110
		 * ~是进行取反的操作为 00000000 00000000 00000000 00000001
		 * 结果是看原码为00000000 00000000 00000000 00000001=1
		 * 
		 */
		System.out.println(n2);
		int n3 = (~2);
		/*2的原码为 00000000 00000000 00000000 00000010
		 * 2的补码为00000000 00000000 00000000 00000010
		 * 对其进行按位取反得 11111111 11111111 11111111 11111101（运算后的补码）
		 * 其反码为补码-1 得 11111111 11111111 11111111 11111100（反码）
		 * 负数的原码 = 符号位不变其他取反 = 10000000 00000000 00000000 00000011=-3
		 */
		System.out.println(n3);
		int n4 = (2|3);
		/*2的原码为 00000000 00000000 00000000 00000010
		 * 3的原码为 00000000 00000000 00000000 00000011
		 * 因为正数的原码=补码=反码
		 * 2的补码为00000000 00000000 00000000 00000010
		 * 3的补码为00000000 00000000 00000000 00000011
		 * 按位或得 00000000 00000000 00000000 00000011（计算后的补码）
		 * 计算后原码为00000000 00000000 00000000 00000011=3
		 */
		System.out.println(n4);
		int n5 = (2&3);
		/*2的原码为 00000000 00000000 00000000 00000010
		 * 3的原码为 00000000 00000000 00000000 00000011
		 * 因为正数的原码=补码=反码
		 * 2的补码为00000000 00000000 00000000 00000010
		 * 3的补码为00000000 00000000 00000000 00000011
		 * 按或与得 00000000 00000000 00000000 00000010（计算后的补码）
		 * 计算后原码为00000000 00000000 00000000 00000010=2
		 */
		System.out.println(n5);
		int n6 = (2^3);
		/*2的原码为 00000000 00000000 00000000 00000010
		 * 3的原码为 00000000 00000000 00000000 00000011
		 * 因为正数的原码=补码=反码
			 * 2的补码为00000000 00000000 00000000 00000010
			 * 3的补码为00000000 00000000 00000000 00000011
		 * 按位异或得 00000000 00000000 00000000 00000001（计算后的补码）
		 * 计算后原码为00000000 00000000 00000000 00000001=1
		 */
		System.out.println(n6);
		int t1=(~-5),t2=(13&7),t3=(5|4),t4=(-3^5);
		System.out.println("t1="+t1);
		System.out.println("t2="+t2);
		System.out.println("t3="+t3);
		System.out.println("t4="+t4);
		
		
		
		
		
	}

}
