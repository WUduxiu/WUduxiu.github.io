<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
        <!-- Spring提供的实例化方式 第一种：在spring配置文件中直接配置类的全路径
               Spring会自动调用该类的无参构造方法来完成bean的实例化
            -->
    <bean id="sb" class="com.powernode.spring6.bean.SpringBean"/>
        <!--
       spring提供的实例化方法第二种，通过简单工厂模式，需要在spring配置文件中告诉spring框架去调用那个类中的那个方法来获取bean
       factory-method属性 指定的是工厂类中的静态方法，也就是告诉spring框架，调用这个框架可以去获取bean
        -->
    <bean id="startBean" class="com.powernode.spring6.simplefactory.StartFactory" factory-method="getStat"/>
        <!-- spring提供的实例化方法第三种，通过工厂方法模式 通过factory-bean和factory-method属性来共同完成 -->
    <bean id="gunFactory" class="com.powernode.spring6.factorymethod.GunFactory"/>
        <!--factory-bean="gunFactory"告诉spring调用那个对象   factory-method="getGun"告诉spring调用那个方法-->
    <bean id="gun" factory-bean="gunFactory" factory-method="getGun"/>
        <!-- spring提供的实例化对象的方法 第四种 通过实现FactoryBean接口实现
            这种方式实际上是第三种的简化版 不需要手动添加factory-bean="gunFactory" factory-method="getGun"俩个属性
            由于实现了FactoryBean接口，所以这是一个特殊的类
            通过一个工厂Bean 来返回一个普通的bean Person对象
            通过FactoryBean这个工厂Bean，主要是想对普通的Bean进行加工处理
        -->
    <bean id="person" class="com.powernode.spring6.factorybean.PersonFactory"/>
</beans>